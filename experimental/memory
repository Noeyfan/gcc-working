#include <memory>

namespace std {
namespace experimental {
inline namespace fundamentals_v1 {

//define class
template<typename _Tp>
  class shared_ptr;

  // C++14 ยง20.8.2.2.6

  //for non default lock policy
  template<typename _Tp, _Lock_policy _Lp = __default_lock_policy>
    using __shared_ptr = std::__shared_ptr<_Tp, _Lp>;

  template<typename _Tp>
    class shared_ptr : public __shared_ptr<__libfund_v1<_Tp>>
    {
    public:
      using __base_type = __shared_ptr<__libfund_v1<_Tp>>;
      using element_type = typename remove_extent<_Tp>::type;

      // 8.2.1.1, shared_ptr constructors
      constexpr shared_ptr() noexcept = default;

      template<typename _Tp1>
        explicit shared_ptr(_Tp1* __p) : __base_type(__p) { }

      template<typename _Tp1, typename _Deleter> 
        shared_ptr(_Tp1* __p, _Deleter __d)
        : __base_type(__p, __d) { }

      template<typename _Tp1, typename _Deleter, typename _Alloc> 
        shared_ptr(_Tp1* __p, _Deleter __d, _Alloc __a)
        : __base_type(__p, __d, __a) { }

      template<typename _Deleter>
        shared_ptr(nullptr_t __p, _Deleter __d)
        : __base_type(__p, __d) { }

      template<typename _Deleter, typename _Alloc>
        shared_ptr(nullptr_t __p, _Deleter __d, _Alloc __a)
        : __base_type(__p, __d, __a) { }

      template<typename _Tp1>
        shared_ptr(const shared_ptr<_Tp1>& __r, _Tp* __p) noexcept
        : __base_type(__r, __p) { }

      shared_ptr(const shared_ptr& __r) noexcept
	: __base_type(__r) { }

      template<typename _Tp1, typename = typename
	       std::enable_if<std::is_convertible<_Tp1*, _Tp*>::value>::type> 
	shared_ptr(const shared_ptr<_Tp1>& __r) noexcept
	: __base_type(__r) { }

      shared_ptr(const shared_ptr<_Tp>&& __r) noexcept
      : __base_type(std::move(__r)) { }

      template<typename _Tp1, typename = typename
	       std::enable_if<std::is_convertible<_Tp1*, _Tp*>::value>::type> 
	shared_ptr(shared_ptr<_Tp1>&& __r) noexcept
	: __base_type(std::move(__r)) { }

      template<typename _Tp1>
        explicit shared_ptr(const weak_ptr<__libfund_v1<_Tp1>>& __r)
        : __base_type(__r) { }

      // auto, unique TODO

      constexpr shared_ptr(nullptr_t __p)
      : __base_type(__p) { }

      // C++14 ยง20.8.2.2 //TODO auto_ptr/unique operator
      ~shared_ptr() = default;

      // C++14 ยง20.8.2.3
      shared_ptr& operator=(const shared_ptr&) noexcept = default;

      template <typename _Tp1>
	shared_ptr& 
      	operator=(const shared_ptr<_Tp1>& __r) noexcept
	{
	  this->__base_type::operator=(__r);
	  return *this;
	}

      shared_ptr& 
      operator=(shared_ptr&& __r) noexcept
      {
        this->__base_type::operator=(std::move(__r));
        return *this;
      }

      template <typename _Tp1>
	shared_ptr& 
      	operator=(shared_ptr<_Tp1>&& __r) noexcept
	{
	  this->__base_type::operator=(std::move(__r));
	  return *this;
	}

      // 8.2.1.2 shared_ptr observers
      element_type& 
      operator[](ptrdiff_t i) const noexcept
      {
	return (this->get())[i];
      }

    private:
      template<typename _Alloc, typename... _Args>
      shared_ptr(_Sp_make_shared_tag __tag, const _Alloc& __a,
        	 _Args&&... __args)
      : __base_type(__tag, __a, std::forward<_Args>(__args)...)
      { }

      template<typename _Tp1, typename _Alloc, typename... _Args>
	friend shared_ptr<_Tp1>
	allocate_shared(const _Alloc& __a, _Args&&...  __args);

      shared_ptr(const weak_ptr<__libfund_v1<_Tp>>& __r, std::nothrow_t)
      : __base_type(__r, std::nothrow) { }

      friend class weak_ptr<__libfund_v1<_Tp>>;
    };

  template<typename _Tp>
    class enable_shared_from_this
    {
    protected:
      constexpr enable_shared_from_this() noexcept { }

      enable_shared_from_this(const enable_shared_from_this&) noexcept { }

      enable_shared_from_this&
      operator=(const enable_shared_from_this&) noexcept
      { return *this; }

      ~enable_shared_from_this() { }

    public:
      shared_ptr<_Tp>
      shared_from_this()
      { return shared_ptr<_Tp>(this->_M_weak_this); }

      shared_ptr<const _Tp>
      shared_from_this() const
      { return shared_ptr<const _Tp>(this->_M_weak_this); }
    private:
      template<typename _Tp1>
	void
	_M_weak_assign(_Tp1* __p, const __shared_count<>& __n) const noexcept
	{ _M_weak_this._M_assign(__p, __n); }

      template<typename _Tp1>
	friend void 
	__enable_shared_from_this_helper(const __shared_count<>& __pn,
					 const enable_shared_from_this* __pe,
					 const _Tp1* __px) noexcept
	{ 
	  if(__pe != 0)
	    __pe->_M_weak_assign(const_cast<_Tp1*>(__px), __pn);
	}

      mutable weak_ptr<__libfund_v1<_Tp>>  _M_weak_this;
    };
}
}
}
