// <experimental/memory> -*- C++ -*-

// Copyright (C) 2015 Free Software Foundation, Inc.
//
// This file is part of the GNU ISO C++ Library.  This library is free
// software; you can redistribute it and/or modify it under the
// terms of the GNU General Public License as published by the
// Free Software Foundation; either version 3, or (at your option)
// any later version.

// This library is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.

// Under Section 7 of GPL version 3, you are granted additional
// permissions described in the GCC Runtime Library Exception, version
// 3.1, as published by the Free Software Foundation.

// You should have received a copy of the GNU General Public License and
// a copy of the GCC Runtime Library Exception along with this program;
// see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see
// <http://www.gnu.org/licenses/>.

/** @file experimental/memory
 *  This is a TS C++ Library header.
 */

//
// N4336 Working Draft, C++ Extensions for Library Fundamentals, Version 2
//

#ifndef _GLIBCXX_EXPERIMENTAL_MEMORY
#define _GLIBCXX_EXPERIMENTAL_MEMORY 1

#pragma GCC system_header

#if __cplusplus <= 201103L
# include <bits/c++14_warning.h>
#else

#include <memory>
#include <type_traits>
#include <utility>
#include <functional>

namespace std _GLIBCXX_VISIBILITY(default)
{
  // helper for _Compatible
  template<typename _From_type, typename _To_type>
    struct __sp_compatible_helper
    { static constexpr bool value
      = is_convertible<_From_type*, _To_type*>::value; };

  template<size_t _Nm, typename _Tp>
    struct __sp_compatible_helper<_Tp[_Nm], _Tp[]>
    { static constexpr bool value = true; };

  // Extend shared_ptr to support arrays
  template<typename _Tp, _Lock_policy _Lp>
    class __shared_ptr<__libfund_v1<_Tp>, _Lp>
    : __shared_ptr<typename remove_extent<_Tp>::type, _Lp>
    {
      using removed_type = typename remove_extent<_Tp>::type;

      struct _Array_Deleter
      {
	void
	operator()(removed_type const *__p) const
	{ delete [] __p; }
      };

      struct _Normal_Deleter
      {
	void
	operator()(removed_type const *__p) const
	{ delete __p; }
      };

      template<typename _Tp1>
	using _Compatible
	  = typename enable_if<__sp_compatible_helper<_Tp1, _Tp>::value>::type;

      using _Deleter_type
	= typename conditional<is_array<_Tp>::value,
			       _Array_Deleter,
			       _Normal_Deleter>::type;

      using _Base_type = __shared_ptr<removed_type>;

      _Base_type&  _M_get_base() { return *this;}
      const _Base_type&  _M_get_base() const { return *this;}

    public:
      using element_type = typename remove_extent<_Tp>::type;

      constexpr __shared_ptr() noexcept
      : _Base_type()
      { }

      template<typename _Tp1>
	explicit __shared_ptr(_Tp1* __p)
	: _Base_type(__p, _Deleter_type())
	{ }

      template<typename _Tp1, typename _Deleter>
	__shared_ptr(_Tp1* __p, _Deleter __d)
	: _Base_type(__p, __d)
	{ }

      template<typename _Tp1, typename _Deleter, typename _Alloc>
	__shared_ptr(_Tp1* __p, _Deleter __d, _Alloc __a)
	: _Base_type(__p, __d, __a)
	{ }

      template<typename _Deleter>
	__shared_ptr(nullptr_t __p, _Deleter __d)
	: _Base_type(__p, __d)
	{ }

      template<typename _Deleter, typename _Alloc>
	__shared_ptr(nullptr_t __p, _Deleter __d, _Alloc __a)
	: _Base_type(__p, __d, __a)
	{ }

      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<__libfund_v1<_Tp1>, _Lp>&
		     __r, element_type* __p) noexcept
	: _Base_type(__r._M_get_base(), __p)
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;

      template<typename _Tp1, typename = _Compatible<_Tp1>>
	__shared_ptr(const __shared_ptr<__libfund_v1<_Tp1>, _Lp>& __r) noexcept
	: _Base_type(__r._M_get_base())
	{ }

      template<typename _Tp1, typename = _Compatible<_Tp1>>
	__shared_ptr(__shared_ptr<__libfund_v1<_Tp1>, _Lp>&& __r) noexcept
	: _Base_type(std::move((__r._M_get_base())))
	{ }

      template<typename _Tp1>
	explicit __shared_ptr(const __weak_ptr<__libfund_v1<_Tp1>, _Lp>& __r)
	: _Base_type(__r._M_get_base())
	{ }

      template<typename _Tp1, typename _Del, typename
	      = _Compatible<typename remove_pointer
	      <typename unique_ptr<_Tp1, _Del> ::pointer>::type>>
	  __shared_ptr(std::unique_ptr<_Tp1, _Del>&& __r)
	  : _Base_type(std::move(__r))
	  { }

      // Array did not support construct from auto_ptr

      constexpr __shared_ptr(nullptr_t) noexcept : __shared_ptr() { }

      // reset
      void
      reset() noexcept
      { __shared_ptr(nullptr).swap(*this); }

      template<typename _Tp1>
	void
	reset(_Tp1* __p)
	{
	  _GLIBCXX_DEBUG_ASSERT(__p == 0 || __p != get());
	  __shared_ptr(__p, _Deleter_type()).swap(*this);
	}

      template<typename _Tp1, typename _Deleter>
	void
	reset(_Tp1* __p, _Deleter __d)
	{ __shared_ptr(__p, __d).swap(*this); }

      template<typename _Tp1, typename _Deleter, typename _Alloc>
	void
	reset(_Tp1* __p, _Deleter __d, _Alloc __a)
	{ __shared_ptr(__p, __d, std::move(__a)).swap(*this); }

      element_type&
      operator[](ptrdiff_t i) const noexcept
      {
	_GLIBCXX_DEBUG_ASSERT(get() != 0 && i >= 0);
	return get()[i];
      }

      template<typename _Tp1>
	__shared_ptr&
	operator=(const __shared_ptr<__libfund_v1<_Tp1>, _Lp>& __r) noexcept
	{
	  this->_Base_type::operator=(__r._M_get_base());
	  return *this;
	}

      __shared_ptr&
      operator=(__shared_ptr&& __r) noexcept
      {
	this->_Base_type::operator=(std::move(__r));
	return *this;
      }

      template<class _Tp1>
	__shared_ptr&
	operator=(__shared_ptr<__libfund_v1<_Tp1>, _Lp>&& __r) noexcept
	{
	  this->_Base_type::operator=(std::move(__r._M_get_base()));
	  return *this;
	}

      void
      swap(__shared_ptr& __other) noexcept
      { this->_Base_type::swap(__other); }

      template<typename _Tp1>
	bool
	owner_before(__shared_ptr<__libfund_v1<_Tp1>, _Lp> const& __rhs) const
	{ return _Base_type::owner_before(__rhs._M_get_base()); }

      template<typename _Tp1>
	bool
	owner_before(__weak_ptr<__libfund_v1<_Tp1>, _Lp> const& __rhs) const
	{ return _Base_type::owner_before(__rhs._M_get_base()); }

      using _Base_type::operator*;
      using _Base_type::operator->;
      using _Base_type::operator bool;
      using _Base_type::get;
      using _Base_type::unique;
      using _Base_type::use_count;

    protected:

      // make_shared not yet support for shared_ptr_arrays
      //template<typename _Alloc, typename... _Args>
      //  __shared_ptr(_Sp_make_shared_tag __tag, const _Alloc& __a,
      //	             _Args&&... __args)
      //	: _M_ptr(), _M_refcount(__tag, (_Tp*)0, __a,
      //	                        std::forward<_Args>(__args)...)
      //	{
      //	  void* __p = _M_refcount._M_get_deleter(typeid(__tag));
      //	  _M_ptr = static_cast<_Tp*>(__p);
      //	  __enable_shared_from_this_helper(_M_refcount, _M_ptr, _M_ptr);
      //	}

      // __weak_ptr::lock()
      __shared_ptr(const __weak_ptr<__libfund_v1<_Tp>, _Lp>& __r,
		   std::nothrow_t)
      : _Base_type(__r._M_get_base(), std::nothrow)
      { }

    private:
      using _Base_type::_M_get_deleter;

      template<typename _Tp1>
	static _Tp1*
	_S_raw_ptr(_Tp1* __ptr)
	{ return __ptr; }

      template<typename _Tp1>
	static auto
	_S_raw_ptr(_Tp1 __ptr) -> decltype(std::__addressof(*__ptr))
	{ return std::__addressof(*__ptr); }

      template<typename _Tp1, _Lock_policy _Lp1> friend class __weak_ptr;
      template<typename _Tp1, _Lock_policy _Lp1> friend class __shared_ptr;

      template<typename _Del, typename _Tp1, _Lock_policy _Lp1>
	friend _Del* get_deleter(const __shared_ptr<_Tp1, _Lp1>&) noexcept;
    };

  // weak_ptr specialization for __shared_ptr array
  template<typename _Tp, _Lock_policy _Lp>
    class __weak_ptr<__libfund_v1<_Tp>, _Lp>
    : __weak_ptr<typename remove_extent<_Tp>::type, _Lp>
    {
      template<typename _Tp1>
	using _Compatible
	  = typename enable_if<__sp_compatible_helper<_Tp1, _Tp>::value>::type;

      using _Base_type = __weak_ptr<typename remove_extent<_Tp>::type>;

      _Base_type&  _M_get_base() { return *this;}
      const _Base_type&  _M_get_base() const { return *this;}

    public:
      using element_type = typename remove_extent<_Tp>::type;

      constexpr __weak_ptr() noexcept
      : _Base_type()
      { }

      __weak_ptr(const __weak_ptr&) noexcept = default;

      ~__weak_ptr() = default;

      template<typename _Tp1, typename = _Compatible<_Tp1>>
	__weak_ptr(const __weak_ptr<__libfund_v1<_Tp1>, _Lp>& __r) noexcept
	: _Base_type(__r._M_get_base())
	{ }

      template<typename _Tp1, typename = _Compatible<_Tp1>>
	__weak_ptr(const __shared_ptr<__libfund_v1<_Tp1>, _Lp>& __r) noexcept
	: _Base_type(__r._M_get_base())
	{ }

      __weak_ptr(__weak_ptr&& __r) noexcept
      : _Base_type(std::move(__r))
      { }

      template<typename _Tp1, typename = _Compatible<_Tp1>>
	__weak_ptr(__weak_ptr<__libfund_v1<_Tp1>, _Lp>&& __r) noexcept
	: _Base_type(std::move(__r._M_get_base()))
	{ }

      __weak_ptr&
      operator=(const __weak_ptr& __r) noexcept = default;

      template<typename _Tp1>
	__weak_ptr&
	operator=(const __weak_ptr<__libfund_v1<_Tp1>, _Lp>& __r) noexcept
	{
	  this->_Base_type::operator=(__r._M_get_base());
	  return *this;
	}

      template<typename _Tp1>
	__weak_ptr&
	operator=(const __shared_ptr<_Tp1, _Lp>& __r) noexcept
	{
	  this->_Base_type::operator=(__r._M_get_base());
	  return *this;
	}

      __weak_ptr&
      operator=(__weak_ptr&& __r) noexcept
      {
	this->_Base_type::operator=(std::move(__r));
	return *this;
      }

      template<typename _Tp1>
	__weak_ptr&
	operator=(__weak_ptr<_Tp1, _Lp>&& __r) noexcept
	{
	  this->_Base_type::operator=(std::move(__r._M_get_base()));
	  return *this;
	}

      void
      swap(__weak_ptr& __other) noexcept
      { this->_Base_type::swap(__other); }

      template<typename _Tp1>
	bool
	owner_before(const __shared_ptr<__libfund_v1<_Tp1>, _Lp>& __rhs) const
	{ return _Base_type::owner_before(__rhs._M_get_base()); }

      template<typename _Tp1>
	bool
	owner_before(const __weak_ptr<__libfund_v1<_Tp1>, _Lp>& __rhs) const
	{ return _Base_type::owner_before(__rhs._M_get_base()); }

      __shared_ptr<__libfund_v1<_Tp>, _Lp>
      lock() const noexcept  // should not be element_type
      { return __shared_ptr<__libfund_v1<_Tp>, _Lp>(*this, std::nothrow); }

      using _Base_type::use_count;
      using _Base_type::expired;
      using _Base_type::reset;

    private:
      // Used by __enable_shared_from_this.
      void
      _M_assign(element_type* __ptr,
		const __shared_count<_Lp>& __refcount) noexcept
      { this->_Base_type::_M_assign(__ptr, __refcount); }

      template<typename _Tp1, _Lock_policy _Lp1> friend class __shared_ptr;
      template<typename _Tp1, _Lock_policy _Lp1> friend class __weak_ptr;
      friend class __enable_shared_from_this<_Tp, _Lp>;
      friend class __weak_ptr_friend<_Tp, _Lp>;
      friend class enable_shared_from_this<_Tp>;
    };

namespace experimental
{
inline namespace fundamentals_v2
{
_GLIBCXX_BEGIN_NAMESPACE_VERSION

#define __cpp_lib_experimental_observer_ptr 201411

  template <typename _Tp>
    class observer_ptr
    {
    public:
      // publish our template parameter and variations thereof
      using element_type = _Tp;
      using __pointer = add_pointer_t<_Tp>;            // exposition-only
      using __reference = add_lvalue_reference_t<_Tp>; // exposition-only

      // 3.2.2, observer_ptr constructors
      // default c’tor
      constexpr observer_ptr() noexcept
      : __t()
      { }

      // pointer-accepting c’tors
      constexpr observer_ptr(nullptr_t) noexcept
      : __t()
      { }

      constexpr explicit observer_ptr(__pointer __p) noexcept
      : __t(__p)
      { }

      // copying c’tors (in addition to compiler-generated copy c’tor)
      template <typename _Up,
		typename = typename enable_if<
		  is_convertible<typename add_pointer<_Up>::type, __pointer
		  >::value
		>::type>
      constexpr observer_ptr(observer_ptr<_Up> __p) noexcept
      : __t(__p.get())
      {
      }

      // 3.2.3, observer_ptr observers
      constexpr __pointer
      get() const noexcept
      {
	return __t;
      }

      constexpr __reference
      operator*() const
      {
	return *get();
      }

      constexpr __pointer
      operator->() const noexcept
      {
	return get();
      }

      constexpr explicit operator bool() const noexcept
      {
	return get() != nullptr;
      }

      // 3.2.4, observer_ptr conversions
      constexpr explicit operator __pointer() const noexcept
      {
	return get();
      }

      // 3.2.5, observer_ptr modifiers
      constexpr __pointer
      release() noexcept
      {
	__pointer tmp = get();
	reset();
	return tmp;
      }

      constexpr void
      reset(__pointer __p = nullptr) noexcept
      {
	__t = __p;
      }

      constexpr void
      swap(observer_ptr& __p) noexcept
      {
	std::swap(__t, __p.__t);
      }

    private:
      __pointer __t;
    }; // observer_ptr<>

  template<typename _Tp>
    void
    swap(observer_ptr<_Tp>& __p1, observer_ptr<_Tp>& __p2) noexcept
    {
      __p1.swap(__p2);
    }

  template<typename _Tp>
    observer_ptr<_Tp>
    make_observer(_Tp* __p) noexcept
    {
      return observer_ptr<_Tp>(__p);
    }

  template<typename _Tp, typename _Up>
    bool
    operator==(observer_ptr<_Tp> __p1, observer_ptr<_Up> __p2)
    {
      return __p1.get() == __p2.get();
    }

  template<typename _Tp, typename _Up>
    bool
    operator!=(observer_ptr<_Tp> __p1, observer_ptr<_Up> __p2)
    {
    return !(__p1 == __p2);
    }

  template<typename _Tp>
    bool
    operator==(observer_ptr<_Tp> __p, nullptr_t) noexcept
    {
      return !__p;
    }

  template<typename _Tp>
    bool
    operator==(nullptr_t, observer_ptr<_Tp> __p) noexcept
    {
      return !__p;
    }

  template<typename _Tp>
    bool
    operator!=(observer_ptr<_Tp> __p, nullptr_t) noexcept
    {
      return bool(__p);
    }

  template<typename _Tp>
    bool
    operator!=(nullptr_t, observer_ptr<_Tp> __p) noexcept
    {
      return bool(__p);
    }

  template<typename _Tp, typename _Up>
    bool
    operator<(observer_ptr<_Tp> __p1, observer_ptr<_Up> __p2)
    {
      return std::less<typename common_type<typename add_pointer<_Tp>::type,
					    typename add_pointer<_Up>::type
					    >::type
		       >{}(__p1.get(), __p2.get());
    }

  template<typename _Tp, typename _Up>
    bool
    operator>(observer_ptr<_Tp> __p1, observer_ptr<_Up> __p2)
    {
      return __p2 < __p1;
    }

  template<typename _Tp, typename _Up>
    bool
    operator<=(observer_ptr<_Tp> __p1, observer_ptr<_Up> __p2)
    {
      return !(__p2 < __p1);
    }

  template<typename _Tp, typename _Up>
    bool
    operator>=(observer_ptr<_Tp> __p1, observer_ptr<_Up> __p2)
    {
      return !(__p1 < __p2);
    }

_GLIBCXX_END_NAMESPACE_VERSION
} // namespace fundamentals_v2
inline namespace fundamentals_v1
{
_GLIBCXX_BEGIN_NAMESPACE_VERSION

#define __cpp_lib_experimental_shared_ptr_arrays 201406

// 8.2.1

  template<typename _Tp> class shared_ptr;
  template<typename _Tp> class weak_ptr;

  template<typename _Tp, _Lock_policy _Lp = __default_lock_policy>
    using __shared_ptr = std::__shared_ptr<__libfund_v1<_Tp>, _Lp>;

  template<typename _Tp, _Lock_policy _Lp = __default_lock_policy>
    using __weak_ptr = std::__weak_ptr<__libfund_v1<_Tp>, _Lp>;

  template<typename _Tp>
    class shared_ptr : public __shared_ptr<_Tp>
    {
    public:
      using element_type = typename remove_extent<_Tp>::type;

      template<typename _Tp1>
	using _Compatible
	  = typename enable_if<__sp_compatible_helper<_Tp1, _Tp>::value>::type;

      using _Base_type = __shared_ptr<_Tp>;

      // 8.2.1.1, shared_ptr constructors
      constexpr shared_ptr() noexcept = default;

      template<typename _Tp1>
	explicit shared_ptr(_Tp1* __p) : _Base_type(__p) { }

      template<typename _Tp1, typename _Deleter>
	shared_ptr(_Tp1* __p, _Deleter __d)
	: _Base_type(__p, __d) { }

      template<typename _Tp1, typename _Deleter, typename _Alloc>
	shared_ptr(_Tp1* __p, _Deleter __d, _Alloc __a)
	: _Base_type(__p, __d, __a) { }

      template<typename _Deleter>
	shared_ptr(nullptr_t __p, _Deleter __d)
	: _Base_type(__p, __d) { }

      template<typename _Deleter, typename _Alloc>
	shared_ptr(nullptr_t __p, _Deleter __d, _Alloc __a)
	: _Base_type(__p, __d, __a) { }

      template<typename _Tp1>
	shared_ptr(const shared_ptr<_Tp1>& __r, element_type* __p) noexcept
	: _Base_type(__r, __p) { }

      shared_ptr(const shared_ptr& __r) noexcept
	: _Base_type(__r) { }

      template<typename _Tp1, typename = _Compatible<_Tp1>>
	shared_ptr(const shared_ptr<_Tp1>& __r) noexcept
	: _Base_type(__r) { }

      shared_ptr(const shared_ptr<_Tp>&& __r) noexcept
      : _Base_type(std::move(__r)) { }

      template<typename _Tp1, typename = _Compatible<_Tp1>>
	shared_ptr(shared_ptr<_Tp1>&& __r) noexcept
	: _Base_type(std::move(__r)) { }

      template<typename _Tp1>
	explicit shared_ptr(const weak_ptr<_Tp1>& __r)
	: _Base_type(__r) { }

#if _GLIBCXX_USE_DEPRECATED
      template<typename _Tp1>
	shared_ptr(std::auto_ptr<_Tp1>&& __r)
	: _Base_type() { }
#endif

      template<typename _Tp1, typename _Del, typename
	= _Compatible<typename remove_pointer
		      <typename unique_ptr
		      <_Tp1, _Del> ::pointer>::type>>
	shared_ptr(std::unique_ptr<_Tp1, _Del>&& __r)
	: _Base_type(std::move(__r)) { }

      constexpr shared_ptr(nullptr_t __p)
      : _Base_type(__p) { }

      // C++14 §20.8.2.2
      ~shared_ptr() = default;

      // C++14 §20.8.2.3
      shared_ptr& operator=(const shared_ptr&) noexcept = default;

      template <typename _Tp1>
	shared_ptr&
	operator=(const shared_ptr<_Tp1>& __r) noexcept
	{
	  this->_Base_type::operator=(__r);
	  return *this;
	}

      shared_ptr&
      operator=(shared_ptr&& __r) noexcept
      {
	this->_Base_type::operator=(std::move(__r));
	return *this;
      }

      template <typename _Tp1>
	shared_ptr&
	operator=(shared_ptr<_Tp1>&& __r) noexcept
	{
	  this->_Base_type::operator=(std::move(__r));
	  return *this;
	}

#if _GLIBCXX_USE_DEPRECATED
      template<typename _Tp1>
	shared_ptr&
	operator=(std::auto_ptr<_Tp1>&& __r)
	{
	  this->__shared_ptr<_Tp>::operator=(std::move(__r));
	  return *this;
	}
#endif

      template <typename _Tp1, typename _Del>
	shared_ptr&
	operator=(unique_ptr<_Tp1, _Del>&& __r)
	{
	  this->_Base_type::operator=(std::move(__r));
	  return *this;
	}

      // C++14 §20.8.2.2.4
      // swap & reset
      // 8.2.1.2 shared_ptr observers
      // in __shared_ptr_base.h

    private:
      template<typename _Alloc, typename... _Args>
      shared_ptr(_Sp_make_shared_tag __tag, const _Alloc& __a,
		 _Args&&... __args)
      : _Base_type(__tag, __a, std::forward<_Args>(__args)...)
      { }

      template<typename _Tp1, typename _Alloc, typename... _Args>
	friend shared_ptr<_Tp1>
	allocate_shared(const _Alloc& __a, _Args&&...  __args);

      shared_ptr(const weak_ptr<_Tp>& __r, std::nothrow_t)
      : _Base_type(__r, std::nothrow) { }

      friend class weak_ptr<_Tp>;
    };

  // C++14 §20.8.2.2.7 //DOING
   template<typename _Tp1, typename _Tp2>
     bool operator==(const shared_ptr<_Tp1>& __a,
		     const shared_ptr<_Tp2>& __b) noexcept
     { return __a.get() == __b.get(); }

   template<typename _Tp>
     inline bool
     operator==(const shared_ptr<_Tp>& __a, nullptr_t) noexcept
     { return !__a; }

   template<typename _Tp>
     inline bool
     operator==(nullptr_t, const shared_ptr<_Tp>& __a) noexcept
     { return !__a; }

   template<typename _Tp1, typename _Tp2>
     inline bool
     operator!=(const shared_ptr<_Tp1>& __a,
		const shared_ptr<_Tp2>& __b) noexcept
     { return __a.get() != __b.get(); }

   template<typename _Tp>
     inline bool
     operator!=(const shared_ptr<_Tp>& __a, nullptr_t) noexcept
     { return (bool)__a; }

   template<typename _Tp>
     inline bool
     operator!=(nullptr_t, const shared_ptr<_Tp>& __a) noexcept
     { return (bool)__a; }

   template<typename _Tp1, typename _Tp2>
     inline bool
     operator<(const shared_ptr<_Tp1>& __a,
	       const shared_ptr<_Tp2>& __b) noexcept
     {
       using _Tp1_RE = typename shared_ptr<_Tp1>::element_type;
       using _Tp2_RE = typename shared_ptr<_Tp2>::element_type;
       using _CT = typename std::common_type<_Tp1_RE*, _Tp2_RE*>::type;
       return std::less<_CT>()(__a.get(), __b.get());
     }

   template<typename _Tp>
     inline bool
     operator<(const shared_ptr<_Tp>& __a, nullptr_t) noexcept
     {
       using _Tp_RE = typename shared_ptr<_Tp>::element_type;
       return std::less<_Tp_RE>()(__a.get(), nullptr);
     }

   template<typename _Tp>
     inline bool
     operator<(nullptr_t, const shared_ptr<_Tp>& __a) noexcept
     {
       using _Tp_RE = typename shared_ptr<_Tp>::element_type;
       return std::less<_Tp_RE*>()(nullptr, __a.get());
     }

   template<typename _Tp1, typename _Tp2>
     inline bool
     operator<=(const shared_ptr<_Tp1>& __a,
		const shared_ptr<_Tp2>& __b) noexcept
     { return !(__b < __a); }

   template<typename _Tp>
     inline bool
     operator<=(const shared_ptr<_Tp>& __a, nullptr_t) noexcept
     { return !(nullptr < __a); }

   template<typename _Tp>
     inline bool
     operator<=(nullptr_t, const shared_ptr<_Tp>& __a) noexcept
     { return !(__a < nullptr); }

   template<typename _Tp1, typename _Tp2>
     inline bool
     operator>(const shared_ptr<_Tp1>& __a,
	       const shared_ptr<_Tp2>& __b) noexcept
     { return (__b < __a); }

   template<typename _Tp>
     inline bool
     operator>(const shared_ptr<_Tp>& __a, nullptr_t) noexcept
     {
       using _Tp_RE = typename shared_ptr<_Tp>::element_type;
       return std::less<_Tp_RE*>()(nullptr, __a.get());
     }

   template<typename _Tp>
     inline bool
     operator>(nullptr_t, const shared_ptr<_Tp>& __a) noexcept
     {
       using _Tp_RE = typename shared_ptr<_Tp>::element_type;
       return std::less<_Tp_RE*>()(__a.get(), nullptr);
     }

   template<typename _Tp1, typename _Tp2>
     inline bool
     operator>=(const shared_ptr<_Tp1>& __a,
		const shared_ptr<_Tp2>& __b) noexcept
     { return !(__a < __b); }

   template<typename _Tp>
     inline bool
     operator>=(const shared_ptr<_Tp>& __a, nullptr_t) noexcept
     { return !(__a < nullptr); }

   template<typename _Tp>
     inline bool
     operator>=(nullptr_t, const shared_ptr<_Tp>& __a) noexcept
     { return !(nullptr < __a); }

   // C++14 §20.8.2.2.8
   template<typename _Tp>
     inline void
     swap(shared_ptr<_Tp>& __a, shared_ptr<_Tp>& __b) noexcept
     { __a.swap(__b); }

   // 8.2.1.3, shared_ptr casts
   template<typename _Tp, typename _Tp1>
     inline shared_ptr<_Tp>
     static_pointer_cast(const shared_ptr<_Tp1>& __r) noexcept
     { return shared_ptr<_Tp>(__r,
			      static_cast<typename shared_ptr<_Tp>
			      ::element_type*>(__r.get())); }

   template<typename _Tp, typename _Tp1>
     inline shared_ptr<_Tp>
     dynamic_pointer_cast(const shared_ptr<_Tp1>& __r) noexcept
     {
       if (_Tp* __p = dynamic_cast<typename shared_ptr<_Tp>
				   ::element_type*>(__r.get()))
	 return shared_ptr<_Tp>(__r, __p);
       return shared_ptr<_Tp>();
     }

   template<typename _Tp, typename _Tp1>
     inline shared_ptr<_Tp>
     const_pointer_cast(const shared_ptr<_Tp1>& __r) noexcept
     { return shared_ptr<_Tp>(__r,
			      const_cast<typename shared_ptr<_Tp>
			      ::element_type*>(__r.get())); }

   template<typename _Tp, typename _Tp1>
     inline shared_ptr<_Tp>
     reinterpret_pointer_cast(const shared_ptr<_Tp1>& __r) noexcept
     { return shared_ptr<_Tp>(__r,
			      reinterpret_cast<typename shared_ptr<_Tp>
			      ::element_type*>(__r.get())); }

   // C++14 §20.8.2.3
   template<typename _Tp>
     class weak_ptr : public __weak_ptr<_Tp>
     {
      template<typename _Tp1>
	using _Compatible
	  = typename enable_if<__sp_compatible_helper<_Tp1, _Tp>::value>::type;

      using _Base_type = __weak_ptr<_Tp>;

   public:
       constexpr weak_ptr() noexcept = default;

       template<typename _Tp1, typename = _Compatible<_Tp1>>
	 weak_ptr(const shared_ptr<_Tp1>& __r) noexcept
	 : _Base_type(__r) { }

       weak_ptr(const weak_ptr&) noexcept = default;

       template<typename _Tp1, typename = _Compatible<_Tp1>>
	 weak_ptr(const weak_ptr<_Tp1>& __r) noexcept
	 : _Base_type(__r) { }

       weak_ptr(weak_ptr&&) noexcept = default;

       template<typename _Tp1, typename = _Compatible<_Tp1>>
	 weak_ptr(weak_ptr<_Tp1>&& __r) noexcept
	 : _Base_type(std::move(__r)) { }

       weak_ptr&
       operator=(const weak_ptr& __r) noexcept = default;

       template<typename _Tp1>
	 weak_ptr&
	 operator=(const weak_ptr<_Tp1>& __r) noexcept
	 {
	   this->_Base_type::operator=(__r);
	   return *this;
	 }

       template<typename _Tp1>
	 weak_ptr&
	 operator=(const shared_ptr<_Tp1>& __r) noexcept
	 {
	   this->_Base_type::operator=(__r);
	   return *this;
	 }

       weak_ptr&
       operator=(weak_ptr&& __r) noexcept = default;

       template<typename _Tp1>
	 weak_ptr&
	 operator=(weak_ptr<_Tp1>&& __r) noexcept
	 {
	   this->_Base_type::operator=(std::move(__r));
	   return *this;
	 }

       shared_ptr<_Tp>
       lock() const noexcept
       { return shared_ptr<_Tp>(*this, std::nothrow); }
     };


   // C++14 §20.8.2.3.6
   template<typename _Tp>
     inline void
     swap(weak_ptr<_Tp>& __a, weak_ptr<_Tp>& __b) noexcept
     { __a.swap(__b); }

   // C++14 §20.8.2.4
   template<typename _Tp> class owner_less;

   // C++14 §20.8.2.6
   template<typename _Tp>
     inline bool
     atomic_is_lock_free(const shared_ptr<_Tp>* __p)
     { return std::atomic_is_lock_free<_Tp, __default_lock_policy>(__p); }

   template<typename _Tp>
     shared_ptr<_Tp> atomic_load(const shared_ptr<_Tp>* __p)
     { return std::atomic_load<_Tp>(__p); }

   template<typename _Tp>
     shared_ptr<_Tp>
     atomic_load_explicit(const shared_ptr<_Tp>* __p, memory_order __mo)
     { return std::atomic_load_explicit<_Tp>(__p, __mo); }

   template<typename _Tp>
     void atomic_store(shared_ptr<_Tp>* __p, shared_ptr<_Tp> __r)
     { return std::atomic_store<_Tp>(__p, __r); }

   template<typename _Tp>
     shared_ptr<_Tp>
     atomic_store_explicit(const shared_ptr<_Tp>* __p,
			   shared_ptr<_Tp> __r,
			   memory_order __mo)
     { return std::atomic_store_explicit<_Tp>(__p, __r, __mo); }

   template<typename _Tp>
     void atomic_exchange(shared_ptr<_Tp>* __p, shared_ptr<_Tp> __r)
     { return std::atomic_exchange<_Tp>(__p, __r); }

   template<typename _Tp>
     shared_ptr<_Tp>
     atomic_exchange_explicit(const shared_ptr<_Tp>* __p,
			      shared_ptr<_Tp> __r,
			      memory_order __mo)
     { return std::atomic_exchange_explicit<_Tp>(__p, __r, __mo); }

   template<typename _Tp>
     bool atomic_compare_exchange_weak(shared_ptr<_Tp>* __p,
				       shared_ptr<_Tp>* __v,
				       shared_ptr<_Tp> __w)
     { return std::atomic_compare_exchange_weak<_Tp>(__p, __v, __w); }

   template<typename _Tp>
     bool atomic_compare_exchange_strong(shared_ptr<_Tp>* __p,
					 shared_ptr<_Tp>* __v,
					 shared_ptr<_Tp> __w)
     { return std::atomic_compare_exchange_strong<_Tp>(__p, __v, __w); }

   template<typename _Tp>
     bool atomic_compare_exchange_weak_explicit(shared_ptr<_Tp>* __p,
						shared_ptr<_Tp>* __v,
						shared_ptr<_Tp> __w,
						memory_order __success,
						memory_order __failure)
     { return std::atomic_compare_exchange_weak_explicit<_Tp>(__p, __v, __w,
							      __success,
							      __failure); }

   template<typename _Tp>
     bool atomic_compare_exchange_strong_explicit(shared_ptr<_Tp>* __p,
						  shared_ptr<_Tp>* __v,
						  shared_ptr<_Tp> __w,
						  memory_order __success,
						  memory_order __failure)
     { return std::atomic_compare_exchange_strong_explicit<_Tp>(__p, __v, __w,
								__success,
								__failure); }

  //enable_shared_from_this
  template<typename _Tp>
    class enable_shared_from_this
    {
    protected:
      constexpr enable_shared_from_this() noexcept { }

      enable_shared_from_this(const enable_shared_from_this&) noexcept { }

      enable_shared_from_this&
      operator=(const enable_shared_from_this&) noexcept
      { return *this; }

      ~enable_shared_from_this() { }

    public:
      shared_ptr<_Tp>
      shared_from_this()
      { return shared_ptr<_Tp>(this->_M_weak_this); }

      shared_ptr<const _Tp>
      shared_from_this() const
      { return shared_ptr<const _Tp>(this->_M_weak_this); }

    private:
      template<typename _Tp1>
	void
	_M_weak_assign(_Tp1* __p, const __shared_count<>& __n) const noexcept
	{ __weak_ptr_friend<_Tp>::_S_assign(_M_weak_this, __p,__n); }

      template<typename _Tp1>
	friend void
	__enable_shared_from_this_helper(const __shared_count<>& __pn,
					 const enable_shared_from_this* __pe,
					 const _Tp1* __px) noexcept
	{
	  if(__pe != 0)
	    __pe->_M_weak_assign(const_cast<_Tp1*>(__px), __pn);
	}

      mutable weak_ptr<_Tp>  _M_weak_this;
    };

_GLIBCXX_END_NAMESPACE_VERSION
} // namespace fundamentals_v1
} // namespace experimental

template <typename _Tp>
  struct hash<experimental::observer_ptr<_Tp>>
  {
    using result_type = size_t;
    using argument_type = experimental::observer_ptr<_Tp>;

    size_t
    operator()(const experimental::observer_ptr<_Tp>& __t) const
    noexcept(noexcept(hash<typename add_pointer<_Tp>::type> {}(__t.get())))
    {
      return hash<typename add_pointer<_Tp>::type> {}(__t.get());
    }

  };

} // namespace std

#endif // __cplusplus <= 201103L

#endif // _GLIBCXX_EXPERIMENTAL_MEMORY
